/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

#define DEFAULT_L 0

&lt {
    quick-tap-ms = <200>;
    tapping-term-ms = <200>;
};

/ {
    chosen { zmk,matrix_transform = &five_column_transform; };

    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;

            quick-tap-ms = <200>;
        };

        vim_i: vim_i {
            compatible = "zmk,behavior-mod-morph";
            label = "VIM_I";
            bindings = <&to 0>, <&vim_I>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        vim_o: vim_o {
            compatible = "zmk,behavior-mod-morph";
            label = "VIM_O";
            bindings = <&next_line_enter>, <&previous_line_enter>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        vim_c_r: vim_c_r {
            compatible = "zmk,behavior-mod-morph";
            label = "VIM_C_R";
            #binding-cells = <0>;
            bindings = <&none>, <&kp LG(LS(Z))>;

            mods = <(MOD_LCTL|MOD_RCTL)>;
        };

        vim_backspace: vim_backspace {
            compatible = "zmk,behavior-mod-morph";
            label = "VIM_BACKSPACE";
            bindings = <&kp LA(BACKSPACE)>, <&kp LA(DELETE)>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        slashandbackslash: slashandbackslash {
            compatible = "zmk,behavior-mod-morph";
            label = "SLASHANDBACKSLASH";
            bindings = <&kp SLASH>, <&kp BACKSLASH>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        quote: quote {
            compatible = "zmk,behavior-mod-morph";
            label = "QUOTE";
            bindings = <&kp SINGLE_QUOTE>, <&kp GRAVE>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        coma_semi: coma_semi {
            compatible = "zmk,behavior-mod-morph";
            label = "COMA_SEMI";
            bindings = <&kp COMMA>, <&kp SEMI>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
            keep-mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dot_colon: dot_colon {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_COLON";
            bindings = <&kp PERIOD>, <&kp COLON>, <&kp LA(COLON)>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
            keep-mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        q_grave: q_grave {
            compatible = "zmk,behavior-mod-morph";
            label = "Q_GRAVE";
            bindings = <&kp Q>, <&kp GRAVE>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        home: home {
            compatible = "zmk,behavior-mod-morph";
            label = "HOME";
            bindings = <&kp LG(LEFT)>, <&kp HOME>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        end: end {
            compatible = "zmk,behavior-mod-morph";
            label = "END";
            bindings = <&kp LG(RIGHT)>, <&kp END>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RALT)>;
        };

        quote_grave: quote_grave {
            compatible = "zmk,behavior-mod-morph";
            label = "QUOTE_GRAVE";
            bindings = <&kp SINGLE_QUOTE>, <&kp GRAVE>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        hm_quotes: hm_quotes {
            compatible = "zmk,behavior-hold-tap";
            label = "HM_QUOTES";
            bindings = <&kp>, <&quote_grave>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            flavor = "tap-preferred";
        };

        dot_comma: dot_comma {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_COMMA";
            bindings = <&kp DOT>, <&kp COMMA>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        multiply: multiply {
            compatible = "zmk,behavior-mod-morph";
            label = "MULTIPLY";
            bindings = <&kp ASTERISK>, <&kp LEFT_BRACE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        divide: divide {
            compatible = "zmk,behavior-mod-morph";
            label = "divide";
            bindings = <&kp SLASH>, <&kp LEFT_PARENTHESIS>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        num_7: num_7 {
            compatible = "zmk,behavior-mod-morph";
            label = "num_7";
            bindings = <&kp N7>, <&kp RIGHT_BRACE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        equals_thic_arrow: equals_thic_arrow {
            compatible = "zmk,behavior-mod-morph";
            label = "EQUALS_THIC_ARROW";
            bindings = <&kp EQUAL>, <&thic_arrow>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        num_0: num_0 {
            compatible = "zmk,behavior-mod-morph";
            label = "NUM_0";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp N0>, <&kp LEFT_BRACKET>;
        };

        num_1: num_1 {
            compatible = "zmk,behavior-mod-morph";
            label = "NUM_1";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp N1>, <&kp RIGHT_BRACKET>;
        };

        num_2: num_2 {
            compatible = "zmk,behavior-mod-morph";
            label = "NUM_2";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp N2>, <&kp COMMA>;
        };

        num_3: num_3 {
            compatible = "zmk,behavior-mod-morph";
            label = "NUM_3";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp N3>, <&kp DOT>;
        };

        num_5: num_5 {
            compatible = "zmk,behavior-mod-morph";
            label = "NUM_5";
            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
            bindings = <&hm RIGHT_GUI N5>, <&kp LT>;
        };

        num_6: num_6 {
            compatible = "zmk,behavior-mod-morph";
            label = "NUM_6";
            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
            bindings = <&hm RIGHT_ALT NUMBER_6>, <&kp GT>;
        };

        hm_quote_minus: hm_quote_minus {
            compatible = "zmk,behavior-mod-morph";
            label = "HM_QUOTE_MINUS";
            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
            bindings = <&hm RCTRL MINUS>, <&kp DOUBLE_QUOTES>;
        };

        num_4: num_4 {
            compatible = "zmk,behavior-mod-morph";
            label = "NUM_4";
            bindings = <&hm RIGHT_SHIFT N4>, <&kp RIGHT_PARENTHESIS>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        always_tilde: always_tilde {
            compatible = "zmk,behavior-mod-morph";
            label = "ALWAYS_TILDE";
            bindings = <&kp LA(N)>, <&kp LA(N)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        num_8: num_8 {
            compatible = "zmk,behavior-mod-morph";
            label = "NUM_8";
            bindings = <&kp N8>, <&kp LA(LS(NUMBER_2))>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        w_euro: w_euro {
            compatible = "zmk,behavior-mod-morph";
            label = "W_EURO";
            bindings = <&kp W>, <&kp LS(LA(NUMBER_2))>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        a_grave_ctrl: a_grave_ctrl {
            compatible = "zmk,behavior-mod-morph";
            label = "A_GRAVE_CTRL";
            bindings = <&hm LCTRL A>, <&kp A>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        always_grave: always_grave {
            compatible = "zmk,behavior-mod-morph";
            label = "ALWAYS_GRAVE";
            bindings = <&kp GRAVE>, <&kp GRAVE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        always_acute: always_acute {
            compatible = "zmk,behavior-mod-morph";
            label = "ALWAYS_ACUTE";
            bindings = <&kp LA(E)>, <&kp LA(E)>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_LSFT|MOD_RSFT)>;
        };

        always_circ: always_circ {
            compatible = "zmk,behavior-mod-morph";
            label = "ALWAYS_CIRC";
            bindings = <&kp LA(I)>, <&kp LA(I)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        cmd_num_4: cmd_num_4 {
            compatible = "zmk,behavior-mod-morph";
            label = "CMD_NUM_4";
            bindings = <&num_4>, <&kp NUMBER_4>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI|MOD_RGUI)>;
            keep-mods = <(MOD_RGUI|MOD_LGUI)>;
        };

        cmd_num_5: cmd_num_5 {
            compatible = "zmk,behavior-mod-morph";
            label = "CMD_NUM_5";
            bindings = <&num_5>, <&kp N5>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI|MOD_RGUI)>;
            keep-mods = <(MOD_RGUI|MOD_LGUI)>;
        };

        cmd_num_1: cmd_num_1 {
            compatible = "zmk,behavior-mod-morph";
            label = "CMD_NUM_1";
            bindings = <&num_1>, <&kp NUMBER_1>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI|MOD_RGUI)>;
            keep-mods = <(MOD_RGUI|MOD_LGUI)>;
        };

        cmd_num_3: cmd_num_3 {
            compatible = "zmk,behavior-mod-morph";
            label = "CMD_NUM_3";
            bindings = <&num_3>, <&kp NUMBER_3>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI|MOD_RGUI)>;
            keep-mods = <(MOD_RGUI|MOD_LGUI)>;
        };

        cmd_num_2: cmd_num_2 {
            compatible = "zmk,behavior-mod-morph";
            label = "CMD_NUM_2";
            bindings = <&num_2>, <&kp NUMBER_2>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI|MOD_RGUI)>;
            keep-mods = <(MOD_RGUI|MOD_LGUI)>;
        };

        cmd_num_6: cmd_num_6 {
            compatible = "zmk,behavior-mod-morph";
            label = "CMD_NUM_6";
            bindings = <&num_6>, <&kp NUMBER_6>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI|MOD_RGUI)>;
            keep-mods = <(MOD_RGUI|MOD_LGUI)>;
        };

        cmd_num_7: cmd_num_7 {
            compatible = "zmk,behavior-mod-morph";
            label = "CMD_NUM_7";
            bindings = <&num_7>, <&kp N7>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI|MOD_RGUI)>;
            keep-mods = <(MOD_RGUI|MOD_LGUI)>;
        };

        cmd_num_8: cmd_num_8 {
            compatible = "zmk,behavior-mod-morph";
            label = "CMD_NUM_8";
            bindings = <&num_8>, <&kp N8>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI|MOD_RGUI)>;
            keep-mods = <(MOD_RGUI|MOD_LGUI)>;
        };

        cmd_w_euro: cmd_w_euro {
            compatible = "zmk,behavior-mod-morph";
            label = "CMD_W_EURO";
            bindings = <&w_euro>, <&kp W>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI|MOD_RGUI|MOD_LCTL|MOD_LSFT|MOD_RCTL|MOD_RSFT)>;
            keep-mods = <(MOD_LCTL|MOD_LSFT|MOD_LALT|MOD_LGUI|MOD_RALT|MOD_RGUI|MOD_RSFT|MOD_RCTL)>;
        };

        shift_tap: shift_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "SHIFT_TAP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "tap-preferred";
            quick-tap-ms = <200>;
        };

        plus_gte: plus_gte {
            compatible = "zmk,behavior-mod-morph";
            label = "PLUS_GTE";
            bindings = <&kp PLUS>, <&gte>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        minus_lte: minus_lte {
            compatible = "zmk,behavior-mod-morph";
            label = "MINUS_LTE";
            bindings = <&kp MINUS>, <&lte>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        p_question: p_question {
            compatible = "zmk,behavior-mod-morph";
            label = "P_QUESTION";
            bindings = <&kp P>, <&kp QUESTION>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        switch_layout: switch_layout {
            compatible = "zmk,behavior-tap-dance";
            label = "SWITCH_LAYOUT";
            #binding-cells = <0>;
            bindings = <&to 0>, <&to 0>;
        };
    };

    combos {
        compatible = "zmk,combos";

        c_dash {
            bindings = <&kp MINUS>;
            key-positions = <13 16>;
        };

        c_underscore {
            bindings = <&kp UNDER>;
            key-positions = <23 26>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        DEFAULT {
            bindings = <
  &kp Q             &kp W        &kp E          &kp R           &kp T                 &kp Y    &kp U            &kp I            &kp O        &kp P
  &hm LEFT_SHIFT A  &hm LCTRL S  &hm LALT D     &hm LEFT_GUI F  &kp G                 &kp H    &hm RIGHT_GUI J  &hm RIGHT_ALT K  &hm LCTRL L  &hm RIGHT_SHIFT APOS
  &kp Z             &kp X        &kp C          &kp V           &kp B                 &kp N    &kp M            &kp COMMA        &kp DOT      &mt BSLH FSLH
                                 &lt 5 LS(F10)  &lt 2 SPACE     &mt LEFT_SHIFT TAB    &kp RET  &lt 3 BACKSPACE  &lt 4 DEL
            >;
        };

        GAME {
            bindings = <
  &kp ESC    &kp Q  &kp W   &kp E      &kp R      &kp T   &kp N7        &kp N8  &kp N9  &kp BACKSPACE
  &kp LSHFT  &kp A  &kp S   &kp D      &kp F      &kp G   &kp N4        &kp N5  &kp N6  &kp DOT
  &kp LCTRL  &kp Z  &kp X   &kp C      &kp V      &kp B   &kp N1        &kp N2  &kp N3  &kp FSLH
                    &trans  &kp SPACE  &kp TAB    &trans  &kp LEFT_ALT  &trans
            >;
        };

        NUM {
            bindings = <
  &kp TILDE  &kp AT    &kp LPAR          &kp RPAR           &kp EXCL    &kp STAR   &kp N7  &kp N8   &kp N9  &kp MINUS
  &kp CARET  &kp HASH  &kp LBRC          &kp RBRC           &kp DLLR    &kp FSLH   &kp N4  &kp N5   &kp N6  &kp PLUS
  &kp AMPS   &kp LT    &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp GT      &kp EQUAL  &kp N1  &kp N2   &kp N3  &kp RET
                       &trans            &trans             &trans      &kp PRCNT  &kp N0  &kp DOT
            >;
        };

        NAV {
            bindings = <
  &trans  &trans  &trans  &trans  &trans    &kp ESC    &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_UP  &msc SCRL_RIGHT
  &trans  &trans  &trans  &trans  &trans    &kp ENTER  &kp LEFT        &kp DOWN        &kp UP        &kp RIGHT
  &trans  &trans  &trans  &trans  &trans    &kp INS    &kp HOME        &kp PAGE_DOWN   &kp PG_UP     &kp END
                  &trans  &trans  &trans    &trans     &trans          &trans
            >;
        };

        MOUSE {
            bindings = <
  &trans  &trans  &trans  &trans  &trans    &trans  &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_UP  &msc SCRL_RIGHT
  &trans  &trans  &trans  &trans  &trans    &trans  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT
  &trans  &trans  &trans  &trans  &trans    &trans  &mkp MB1        &mkp MB2        &mkp MB3      &trans
                  &trans  &trans  &trans    &trans  &trans          &trans
            >;
        };

        MEDIA {
            bindings = <
  &tog 1        &kp C_MUTE    &kp C_VOL_DN  &kp C_VOL_UP  &out OUT_USB    &trans           &kp F7  &kp F8  &kp F9  &kp F12
  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &kp PRINTSCREEN  &kp F4  &kp F5  &kp F6  &kp F11
  &bt BT_CLR    &kp C_PREV    &kp C_PP      &kt C_NEXT    &out OUT_BLE    &trans           &kp F1  &kp F2  &kp F3  &kp F10
                              &trans        &trans        &trans          &trans           &trans  &trans
            >;
        };
    };
};
